# -*- coding: utf-8 -*-
"""
Created on Tue Apr 13 14:21:07 2021

@author: owner
"""
from androguard.core.bytecodes.apk import APK
from androguard.core.bytecodes.dvm import DalvikVMFormat
from androguard.core.analysis.analysis import Analysis

from androguard.misc import AnalyzeAPK

import csv

import zipfile, os


class FFsettings:
    def __init__(self, operation, targetAPK, is_malware):
        self.operation = operation
        self.targetAPK = targetAPK
        self.destinationFile = "./MyData/testing.csv"
        self.is_malware = is_malware
        
    def get_features(self):
        

        #apk_file_name = "Zenprise for Employees.apk"

        apk_file_path = "./MyApk/" + self.targetAPK

       # is_malware = 1
       
       
       
        if self.operation == '1':
           self.destinationFile = "./MyData/extracted_features.csv"
           
       
           
        print("using: " + self.destinationFile + self.operation )


        a, _, dx = AnalyzeAPK(apk_file_path)



        apk_to_zip = zipfile.ZipFile(apk_file_path)

        apk_size = os.path.getsize(apk_file_path)

        dex_size = apk_to_zip.getinfo("classes.dex").file_size


        apk_version_min = 0
        apk_version_max = 0
        target_version = 0
        sms_send = 0
        sms_delete = 0
        sms_interrupt = 0
        http_post = 0


        reflect_count = sum( 1 for _ in dx.find_methods('Ljava/lang/reflect/Method;', '.', '.') )
        sys_count = sum( 1 for _ in dx.find_methods('Ljava/lang/System;', '.', '.') )
        crypt_count = sum( 1 for _ in dx.find_methods('Ljava/crypto/.', '.', '.') )
        class_count = len(dx.get_classes())
        method_count = sum(1 for _ in dx.get_methods())
        dynamic_count = sum( 1 for _ in dx.find_methods('Ldalvik/system/DexClassLoader/.', '.', '.'))
        file_count = len(a.get_files())




       
        if a.get_min_sdk_version() is not None:
            apk_version_min = str(a.get_min_sdk_version())
        else :
            apk_version_min = 0
    
    
       
        if a.get_max_sdk_version() is not None:
            apk_version_max = str(a.get_max_sdk_version())
        else :
            apk_version_max = 0
    
    
        
        if a.get_target_sdk_version() is not None:
            target_version = str(a.get_target_sdk_version())
        else:
            target_version = 0



# android API features

        
        if (sum( 1 for _ in dx.find_methods('Landroid/telephony/SmsManager;')) > 0 ) or (sum( 1 for _ in dx.find_methods('Landroid/telephony/gsm/SmsManager;')) > 0 ):
            sms_send = 1
        else :
            sms_send = 0
    
    
       
        if sum( 1 for _ in dx.find_methods('Landroid/content/ContentResolver;', 'delete') ) > 0:
            sms_delete = 1
        else:
            sms_delete = 0


        
        if sum( 1 for _ in dx.find_methods('Landroid/content/BroadcastReceiver;', 'abortBroadcast') ) > 0:
            sms_interrupt = 1
        else :
            sms_interrupt = 0



        
        if (sum( 1 for _ in dx.find_methods('Lorg/apache/http/client/methods/HttpPost;') ) > 0 ) or (sum( 1 for _ in dx.find_methods('Ljava/net/HttpURLConnection;') ) > 0):
            http_post = 1
        else :
            http_post = 0


        droid_id = 0
        if sum( 1 for _ in dx.find_methods('Landroid/telephony/TelephonyManager;', 'getDeviceId', '.')) > 0:
            droid_id = 1
        else:
            droid_id = 0
    
    
    # simCountry -> gets the country value stored in SIM
        sim_country = 0
        if sum( 1 for _ in dx.find_methods('Landroid/telephony/TelephonyManager;', 'getSimCountryIso', '.')) > 0:
            sim_country = 1
        else:
            sim_country = 0
    
    
    
# installed packages can be retrieved using this library, allowing mallicious users to collect data about the device
        installed_pack = 0
        if sum( 1 for _ in dx.find_methods('Landroid/content/pm/PackageManager;', 'getInstalledPackages', '.')) > 0:
            installed_pack = 1
        else:
            installed_pack = 0
    
    

# subprocess
        subprocess = 0
        if (sum( 1 for _ in dx.find_methods('Ljava/lang/ProcessBuilder;','start','.')) > 0) or (sum( 1 for _ in dx.find_methods('Ljava/lang/Runtime;','exec','.')) > 0):
            subprocess = 1
        else:
            subprocess = 0
    

    
# used for jni --> to load java libraries to execute code not allowed in current language
        jni = 0
        if sum( 1 for _ in dx.find_methods('Ljava/lang/System;', 'loadLibrary', '.')) > 0:
            jni = 1
        else:
            jni = 0



        apk_permissions = a.get_permissions()

        permission_count = len(apk_permissions)

        internet_permission = 0
        debug_permission = 0
        modify_state_permission = 0
        audio_recording_permission = 0
        boot_timer_permission = 0
        recieve_MMS_permission = 0
        recieve_SMS_permission = 0
        recieve_WAP_permission = 0 # for wap messages
        send_SMS_permission = 0
        phone_call_permission = 0
        privileged_call_permission = 0 # for ignoring user auth when calling umbers (**!!** including emergency)
        process_outgoing_permission = 0 # for processing outgoing calls 
        call_log_permission = 0
        external_storage_permission = 0
        read_logs_permission = 0
        coarse_location_permission = 0 # allows apk to get the location on the device (there are more accurate location finding methods) 
        fine_location_permission = 0
        bluetooth_permission = 0
        camera_permission = 0
        pkg_install_permission = 0
        nfc_permission = 0 # Provides access to Near Field Communication (NFC) functionality, allowing applications to read NDEF message in NFC tag
        read_contacts_permission = 0
 

# INTERNET
        if 'android.permission.INTERNET' in a.get_permissions():
            internet_permission = 1
        else:
            internet_permission = 0
    
# SET_DEBUG_APP
        if 'android.permission.SET_DEBUG_APP' in a.get_permissions():
            debug_permission = 1
        else:
            debug_permission = 0
    
    # MODIFY_PHONE_STATE
        if 'android.permission.MODIFY_PHONE_STATE' in a.get_permissions():
            modify_state_permission = 1
        else:
            modify_state_permission = 0
    
    # RECORD_AUDIO
        if 'android.permission.RECORD_AUDIO' in a.get_permissions():
            audio_recording_permission = 1
        else:
            audio_recording_permission = 0
    
    
    # RECEIVE_BOOT_COMPLETED -> attacker gains info about os, etc... from boot times 
        if 'android.permission.RECEIVE_BOOT_COMPLETED' in a.get_permissions():
            boot_timer_permission = 1
        else:
            boot_timer_permission = 0
    
    # RECEIVE_MMS
        if 'android.permission.RECEIVE_MMS' in a.get_permissions():
            recieve_MMS_permission = 1
        else:
            recieve_MMS_permission = 0
    
    # RECEIVE_SMS
        if 'android.permission.RECEIVE_SMS' in a.get_permissions():
            recieve_SMS_permission = 1
        else:
            recieve_SMS_permission = 0
    
    # RECEIVE_WAP_PUSH --> formWAP messages
        if 'android.permission.RECEIVE_WAP_PUSH' in a.get_permissions():
            recieve_WAP_permission = 1
        else:
            Rrecieve_WAP_permission = 0
    
    # SEND_SMS
        if 'android.permission.SEND_SMS' in a.get_permissions():
            send_SMS_permission = 1
        else:
            send_SMS_permission = 0
    
    # CALL_PHONE
        if 'android.permission.CALL_PHONE' in a.get_permissions():
            phone_call_permission = 1
        else:
            phone_call_permission = 0
    
    # CALL_PRIVILEGED
        if 'android.permission.CALL_PRIVILEGED' in a.get_permissions():
            privileged_call_permission = 1
        else:
            privileged_call_permission = 0
    
    # PROCESS_OUTGOING_CALLS
        if 'android.permission.PROCESS_OUTGOING_CALLS' in a.get_permissions():
            process_outgoing_permission = 1
        else:
            process_outgoing_permission = 0
    
    # READ_CALL_LOG
        if 'android.permission.READ_CALL_LOG' in a.get_permissions():
            call_log_permission = 1
        else:
            call_log_permission = 0
    
    # READ_EXTERNAL_STORAGE
        if 'android.permission.READ_EXTERNAL_STORAGE' in a.get_permissions():
            external_storage_permission = 1
        else:
            external_storage_permission = 0
    
    # READ_LOGS
        if 'android.permission.READ_LOGS' in a.get_permissions():
            read_logs_permission = 1
        else:
            read_logs_permission = 0
    
    # ACCESS_COARSE_LOCATION
        if 'android.permission.ACCESS_COARSE_LOCATION' in a.get_permissions():
            coarse_location_permission = 1
        else:
            coarse_location_permission = 0
    
    # ACCESS_FINE_LOCATION
        if 'android.permission.ACCESS_FINE_LOCATION' in a.get_permissions():
            fine_location_permission = 1
        else:
            fine_location_permission = 0
    
    # BLUETOOTH
        if 'android.permission.BLUETOOTH' in a.get_permissions():
            bluetooth_permission = 1
        else:
            bluetooth_permission = 0
    
    # CAMERA
        if 'android.permission.CAMERA' in a.get_permissions():
            camera_permission = 1
        else:
            camera_permission = 0
    
    # INSTALL_PACKAGES
        if 'android.permission.INSTALL_PACKAGES' in a.get_permissions():
            pkg_install_permission = 1
        else:
            pkg_install_permission = 0
    
    # NFC
        if 'android.permission.NFC' in a.get_permissions():
            nfc_permission = 1
        else:
            nfc_permission = 0
    
    # READ_CONTACTS
        if 'android.permission.READ_CONTACTS' in a.get_permissions():
            read_contacts_permission = 1
        else:
            read_contacts_permission = 0
    
    
    
        receiver_count = len(a.get_receivers())

        activity_count = len(a.get_activities())

        provider_count = len(a.get_providers())

        service_count = len(a.get_services())


# exported activities are ones that can be launched/used by other components of other applications --> potential threat

        exported_count = 0

        apk_manifest = a.get_android_manifest_axml().get_xml()

        exported_count = str(apk_manifest).count("android:exported=\"true\"")


        h_pic_count = 0
        m_pic_count = 0
        l_pic_count = 0 
        x_pic_count = 0

        for info in a.zip.infolist():
            if 'res/drawable-hdpi' in info.filename:
                h_pic_count += 1
            elif 'res/drawable-mdpi' in info.filename:
                m_pic_count += 1
            elif 'res/drawable-ldpi' in info.filename:
                l_pic_count += 1
            elif 'res/drawable-xhdpi' in info.filename:
                x_pic_count += 1

        total_pic_count = h_pic_count + m_pic_count + l_pic_count + x_pic_count



        row_list = []

        if os.path.isfile(self.destinationFile) and self.operation != '1':
        
            row_list = [
            
            [self.targetAPK, apk_size, dex_size, file_count, class_count, method_count, dynamic_count, reflect_count, crypt_count, sys_count, apk_version_min, apk_version_max, target_version, sms_send, sms_delete, sms_interrupt, http_post,
        	droid_id, sim_country, installed_pack, subprocess, jni, permission_count, internet_permission, debug_permission, modify_state_permission, audio_recording_permission, boot_timer_permission, recieve_MMS_permission, recieve_SMS_permission, recieve_WAP_permission, send_SMS_permission, 
        	phone_call_permission, privileged_call_permission, process_outgoing_permission, call_log_permission, external_storage_permission, read_logs_permission, coarse_location_permission, fine_location_permission, bluetooth_permission,
        	camera_permission, pkg_install_permission, nfc_permission, read_contacts_permission, receiver_count, activity_count, provider_count, service_count, exported_count, h_pic_count, m_pic_count, l_pic_count, x_pic_count,
        	total_pic_count, self.is_malware]
            ]

    
        else:
            row_list = [
            
            ["apk_file_name","apk_size", "dex_size", "file_count", "class_count", "method_count", "dynamic_count", "reflect_count", "crypt_count", "sys_count", "apk_version_min", "apk_version_max", "target_version", "sms_send", "sms_delete", "sms_interrupt", "http_post",
        	"droid_id", "sim_country", "installed_pack", "subprocess", "jni", "permission_count", "internet_permission", "debug_permission", "modify_state_permission", "audio_recording_permission", "boot_timer_permission", "recieve_MMS_permission", "recieve_SMS_permission", "recieve_WAP_permission", "send_SMS_permission", 
        	"phone_call_permission", "privileged_call_permission", "process_outgoing_permission", "call_log_permission", "external_storage_permission", "read_logs_permission", "coarse_location_permission", "fine_location_permission", "bluetooth_permission",
        	"camera_permission", "pkg_install_permission", "nfc_permission", "read_contacts_permission", "receiver_count", "activity_count", "provider_count", "service_count", "exported_count", "h_pic_count", "m_pic_count", "l_pic_count", "x_pic_count",
        	"total_pic_count", "is_malware"]
            ,
            [self.targetAPK, apk_size, dex_size, file_count, class_count, method_count, dynamic_count, reflect_count, crypt_count, sys_count, apk_version_min, apk_version_max, target_version, sms_send, sms_delete, sms_interrupt, http_post,
        	droid_id, sim_country, installed_pack, subprocess, jni, permission_count, internet_permission, debug_permission, modify_state_permission, audio_recording_permission, boot_timer_permission, recieve_MMS_permission, recieve_SMS_permission, recieve_WAP_permission, send_SMS_permission, 
        	phone_call_permission, privileged_call_permission, process_outgoing_permission, call_log_permission, external_storage_permission, read_logs_permission, coarse_location_permission, fine_location_permission, bluetooth_permission,
        	camera_permission, pkg_install_permission, nfc_permission, read_contacts_permission, receiver_count, activity_count, provider_count, service_count, exported_count, h_pic_count, m_pic_count, l_pic_count, x_pic_count,
        	total_pic_count, self.is_malware]
            ]
        
        
        r_a = 'a'
        
        if self.operation == '1' :
            r_a = 'w'
        
        with open(self.destinationFile, r_a, newline='') as file:
            writer = csv.writer(file)
            writer.writerows(row_list)
        


